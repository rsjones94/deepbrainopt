# -*- coding: utf-8 -*-
# This script was auto-generated by Sim4Life light version 7.0.1.8169
# and then modified by Sky Jones to cycle through each contact and simulate 
# the voltage distribution with a boundary condition of 1V for a single
# active contact at a time

import os
from datetime import datetime

import numpy
import numpy as np
import s4l_v1.document as document
import s4l_v1.materials.database as database
import s4l_v1.model as model
import s4l_v1.simulation.emlf as emlf
import s4l_v1.units as units
from s4l_v1 import ReleaseVersion
from s4l_v1 import Unit

import s4l_v1.analysis as analysis


project_folder = 'C:/Users/jonesr36/OneDrive - Cleveland Clinic/Documents/x010'

do_erase = True # if True, then the results of each simulation will be deleted after saving the data
#only_run = ['contact_2']
only_run = None
# set to a list of contacts you want to run. if None, runs all. sample: eg ['contact_2', 'contact_8']
use_hightol = True # whether to use high solver tolerance

####
contact_nums = np.arange(1,9)

results_folder = os.path.join(project_folder, 'voltage_maps')
if not os.path.exists(results_folder):
    os.mkdir(results_folder)

# write the metadata file
now = datetime.now()
# dd/mm/YY H:M:S
dt_string = now.strftime("%d/%m/%Y %H:%M:%S")

subject_id = os.path.basename(os.path.dirname(results_folder))

active_contact_entity_names = [f'contact_{i}' for i in contact_nums]
if not only_run:
    only_run = active_contact_entity_names


meta_outfile = os.path.join(results_folder, 'meta.txt')
meta_text = f'Subject: {subject_id}\nResolution: 0.5mm isotropic\nProcessing began: {dt_string}\nContacts simulated:'
for contact_num, acen in zip(contact_nums, active_contact_entity_names):
    if acen in only_run:
        meta_text = meta_text + f'\n\t{acen} @ 1V'

with open(meta_outfile, 'w') as f:
    f.write(meta_text)

# begin running the simulations
cnum = 0
for contact_num, acen in zip(contact_nums, active_contact_entity_names):
    
    if not acen in only_run:
        continue
    
    cnum += 1
    print(f'Simulating distribution for {acen}\n\t({cnum} of {len(only_run)})')
    
    try:
        
        entity_active_contact = model.AllEntities()[acen]
        
        # Define the version to use for default values
        ReleaseVersion.set_active(ReleaseVersion.version7_0)
        
        # Creating the simulation
        simulation = emlf.ElectroQuasiStaticSimulation()
        simulation.Name = acen
    
        # Mapping the components and entities
        component__plane_x = simulation.AllComponents["Plane X+"]
        component__plane_x_1 = simulation.AllComponents["Plane X-"]
        component__background = simulation.AllComponents["Background"]
        component__plane_y = simulation.AllComponents["Plane Y+"]
        component__plane_y_1 = simulation.AllComponents["Plane Y-"]
        component__plane_z = simulation.AllComponents["Plane Z+"]
        component__plane_z_1 = simulation.AllComponents["Plane Z-"]
        component__overall_field = simulation.AllComponents["Overall Field"]
        entity_hor_sep_5 = model.AllEntities()["hor_sep_5"]
        entity_hor_sep_3 = model.AllEntities()["hor_sep_3"]
        entity_contact_2 = model.AllEntities()["contact_2"]
        entity_midshaft_smalltop_1 = model.AllEntities()["midshaft_smalltop_1"]
        entity_gm = model.AllEntities()["GM"]
        entity_wm = model.AllEntities()["WM"]
        entity_vert_sep_2 = model.AllEntities()["vert_sep_2"]
        entity_contact_6 = model.AllEntities()["contact_6"]
        entity_hor_sep_4 = model.AllEntities()["hor_sep_4"]
        entity_contact_3 = model.AllEntities()["contact_3"]
        entity_bg = model.AllEntities()["BG"]
        entity_midshaft_bigtop_2 = model.AllEntities()["midshaft_bigtop_2"]
        entity_vert_sep_1 = model.AllEntities()["vert_sep_1"]
        entity_hor_sep_2 = model.AllEntities()["hor_sep_2"]
        entity_midshaft_smalltop_2 = model.AllEntities()["midshaft_smalltop_2"]
        entity_bottom_core = model.AllEntities()["bottom_core"]
        entity_csf = model.AllEntities()["CSF"]
        entity_midshaft_topcore = model.AllEntities()["midshaft_topcore"]
        entity_midshaft_bigtop_1 = model.AllEntities()["midshaft_bigtop_1"]
        entity_contact_8 = model.AllEntities()["contact_8"]
        entity_midshaft_bottom = model.AllEntities()["midshaft_bottom"]
        entity_contact_7 = model.AllEntities()["contact_7"]
        entity_tip = model.AllEntities()["tip"]
        entity_vert_sep_3 = model.AllEntities()["vert_sep_3"]
        entity_hor_sep_1 = model.AllEntities()["hor_sep_1"]
        entity_contact_1 = model.AllEntities()["contact_1"]
        entity_top = model.AllEntities()["top"]
        entity_contact_5 = model.AllEntities()["contact_5"]
        entity_contact_4 = model.AllEntities()["contact_4"]
        entity_hor_sep_6 = model.AllEntities()["hor_sep_6"]
    
        # Adding a new MaterialSettings
        material_settings = emlf.MaterialSettings()
        components = [entity_wm]
        mat = database["IT'IS 4.1"]["Brain (White Matter)"]
        if mat is not None:
            simulation.LinkMaterialWithDatabase(material_settings, mat)
        else:
            # Fallback if material is not found
            material_settings.Name = "Brain (White Matter)"
            material_settings.MassDensity = 1041.0, Unit("kg/m^3")
            material_settings.ElectricProps.Conductivity = 0.06257508398106318, Unit("S/m")
            material_settings.ElectricProps.RelativePermittivity = 69810.68883114036
        simulation.Add(material_settings, components)
    
        # Adding a new MaterialSettings
        material_settings = emlf.MaterialSettings()
        components = [entity_gm]
        mat = database["IT'IS 4.1"]["Brain (Grey Matter)"]
        if mat is not None:
            simulation.LinkMaterialWithDatabase(material_settings, mat)
        else:
            # Fallback if material is not found
            material_settings.Name = "Brain (Grey Matter)"
            material_settings.MassDensity = 1044.5, Unit("kg/m^3")
            material_settings.ElectricProps.Conductivity = 0.09880676820596299, Unit("S/m")
            material_settings.ElectricProps.RelativePermittivity = 164062.99316639948
        simulation.Add(material_settings, components)
    
        # Adding a new MaterialSettings
        material_settings = emlf.MaterialSettings()
        components = [entity_csf]
        mat = database["IT'IS 4.1"]["Cerebrospinal Fluid"]
        if mat is not None:
            simulation.LinkMaterialWithDatabase(material_settings, mat)
        else:
            # Fallback if material is not found
            material_settings.Name = "Cerebrospinal Fluid"
            material_settings.MassDensity = 1007.0, Unit("kg/m^3")
            material_settings.ElectricProps.Conductivity = 2.0000000000232188, Unit("S/m")
            material_settings.ElectricProps.RelativePermittivity = 108.9999972649334
        simulation.Add(material_settings, components)
    
        # Adding a new MaterialSettings
        material_settings = emlf.MaterialSettings()
        components = [model.AllEntities()[k] for k in active_contact_entity_names if k != acen]
        
        material_settings.MaterialType = material_settings.MaterialType.enum.PEC
        # use perfect electrical conductor for model simplicity
        
        '''
        # or use Platinum - Iridium (computationally costly for little benefit)
        mat = database["Generic 1.1"]["Platinium - Iridium"]
        if mat is not None:
            simulation.LinkMaterialWithDatabase(material_settings, mat)
        else:
            # Fallback if material is not found
            material_settings.Name = "Platinium - Iridium"
            material_settings.ElectricProps.Conductivity = 5278000.0, Unit("S/m")
        '''
        simulation.Add(material_settings, components)
    
        # Adding a new MaterialSettings
        material_settings = emlf.MaterialSettings()
        components = [entity_bottom_core, entity_hor_sep_1, entity_hor_sep_2, entity_hor_sep_3, entity_hor_sep_4, entity_hor_sep_5, entity_hor_sep_6, entity_midshaft_bigtop_1, entity_midshaft_bigtop_2, entity_midshaft_bottom, entity_midshaft_smalltop_1, entity_midshaft_smalltop_2, entity_midshaft_topcore, entity_tip, entity_top, entity_vert_sep_1, entity_vert_sep_2, entity_vert_sep_3]
        mat = database["Generic 1.1"]["Tecothane 75D (Polyurethane)"]
        if mat is not None:
            simulation.LinkMaterialWithDatabase(material_settings, mat)
        else:
            # Fallback if material is not found
            material_settings.Name = "Tecothane 75D (Polyurethane)"
            material_settings.ElectricProps.RelativePermittivity = 3.4
        simulation.Add(material_settings, components)
    
        # Adding a new BoundarySettings
        boundary_settings = emlf.BoundarySettings()
        components = [entity_bg]
        boundary_settings.Name = "brain_bounds"
        simulation.Add(boundary_settings, components)
    
        # Adding a new BoundarySettings
        boundary_settings = emlf.BoundarySettings()
        components = [entity_active_contact]
        boundary_settings.Name = "active_lead"
        boundary_settings.DirichletValue = 1.0, units.Volts
        simulation.Add(boundary_settings, components)
    
        # Editing GlobalGridSettings "Grid (Empty)"
        global_grid_settings = simulation.GlobalGridSettings
        global_grid_settings.PaddingMode = global_grid_settings.PaddingMode.enum.Manual
        global_grid_settings.BottomPadding = numpy.array([0.0, 0.0, 0.0]), units.MilliMeters
        global_grid_settings.TopPadding = numpy.array([0.0, 0.0, 0.0]), units.MilliMeters
    
        # Editing AutomaticGridSettings "Automatic"
        automatic_grid_settings = [x for x in simulation.AllSettings if isinstance(x, emlf.AutomaticGridSettings) and x.Name == "Automatic"][0]
        automatic_grid_settings.AutoRefinement = automatic_grid_settings.AutoRefinement.enum.AutoRefinementVeryCoarse
    
        # Adding a new ManualGridSettings
        manual_grid_settings = simulation.AddManualGridSettings([entity_contact_1, entity_contact_2, entity_contact_3, entity_contact_4, entity_contact_5, entity_contact_6, entity_contact_7, entity_contact_8, entity_hor_sep_1, entity_hor_sep_2, entity_hor_sep_3, entity_hor_sep_4, entity_hor_sep_5, entity_hor_sep_6, entity_vert_sep_1, entity_vert_sep_2, entity_vert_sep_3])
        manual_grid_settings.Name = "contacts_and_insulators"
        manual_grid_settings.MaxStep = numpy.array([0.1, 0.1, 0.1]), units.MilliMeters
        manual_grid_settings.Resolution = numpy.array([0.05, 0.05, 0.05]), units.MilliMeters
    
        # Adding a new ManualGridSettings
        manual_grid_settings = simulation.AddManualGridSettings([entity_bottom_core, entity_midshaft_bigtop_1, entity_midshaft_bigtop_2, entity_midshaft_bottom, entity_midshaft_smalltop_1, entity_midshaft_smalltop_2, entity_midshaft_topcore, entity_tip, entity_top])
        manual_grid_settings.Name = "other_lead"
    
        # Adding a new ManualGridSettings
        manual_grid_settings = simulation.AddManualGridSettings([entity_csf, entity_gm, entity_wm])
        manual_grid_settings.Name = "brain"
        manual_grid_settings.MaxStep = numpy.array([20.0, 20.0, 20.0]), units.MilliMeters
        manual_grid_settings.Resolution = numpy.array([10.0, 10.0, 10.0]), units.MilliMeters
    
        # Adding a new ManualGridSettings
        manual_grid_settings = simulation.AddManualGridSettings([entity_bg])
        manual_grid_settings.Name = "exterior"
        manual_grid_settings.MaxStep = numpy.array([80.0, 80.0, 80.0]), units.MilliMeters
        manual_grid_settings.Resolution = numpy.array([40.0, 40.0, 40.0]), units.MilliMeters
    
        # Editing AutomaticVoxelerSettings "Automatic Voxeler Settings"
        automatic_voxeler_settings = [x for x in simulation.AllSettings if 
                                   isinstance(x, emlf.AutomaticVoxelerSettings) 
                                   and x.Name == "Automatic Voxeler Settings"][0]
        components = [entity_bg, entity_csf, entity_gm, entity_wm]
        simulation.Add(automatic_voxeler_settings, components)
    
        # Adding a new ManualVoxelerSettings
        manual_voxeler_settings = emlf.ManualVoxelerSettings()
        components = [entity_bottom_core, entity_contact_1, entity_contact_2, 
                   entity_contact_3, entity_contact_4, entity_contact_5, 
                   entity_contact_6, entity_contact_7, entity_contact_8, 
                   entity_hor_sep_1, entity_hor_sep_2, entity_hor_sep_3, 
                   entity_hor_sep_4, entity_hor_sep_5, entity_hor_sep_6, 
                   entity_midshaft_bigtop_1, entity_midshaft_bigtop_2,
                   entity_midshaft_bottom, entity_midshaft_smalltop_1,
                   entity_midshaft_smalltop_2, entity_midshaft_topcore, 
                   entity_tip, entity_top, entity_vert_sep_1, entity_vert_sep_2, 
                   entity_vert_sep_3]
        manual_voxeler_settings.Name = "lead"
        manual_voxeler_settings.Priority = 1
        simulation.Add(manual_voxeler_settings, components)
        
        
        if use_hightol:
            solver_settings = simulation.SolverSettings
            solver_settings.PredefinedTolerances = solver_settings.PredefinedTolerances.enum.High

    
        # Update the materials with the new frequency parameters
        simulation.UpdateAllMaterials()
    
        # Update the grid with the new parameters
        simulation.UpdateGrid()
        
        # create the voxels
        simulation.CreateVoxels()
    
        # Add the simulation to the UI
        document.AllSimulations.Add(simulation)
        simulation.RunSimulation()
        
    except Exception as exc:
        import traceback
        traceback.print_exc()
        # Reset active version to default
        ReleaseVersion.reset()
        raise(exc)
    
    
    ##### analysis 
    
    
    try:
        # Define the version to use for default values
        ReleaseVersion.set_active(ReleaseVersion.version7_0)
        
        # Creating the analysis pipeline
        # Adding a new SimulationExtractor
        simulation = document.AllSimulations[acen]
        simulation_extractor = simulation.Results()
    
        # Adding a new EmSensorExtractor
        em_sensor_extractor = simulation_extractor["Overall Field"]
        em_sensor_extractor.FrequencySettings.ExtractedFrequency = u"All"
        document.AllAlgorithms.Add(em_sensor_extractor)
    
        # Adding a new FieldDataResampleFilter
        inputs = [em_sensor_extractor.Outputs["EM Potential(x,y,z,f0)"]]
        field_data_resample_filter = analysis.field.FieldDataResampleFilter(inputs=inputs)
        field_data_resample_filter.UseGridStep = True
        field_data_resample_filter.GridStep = numpy.array([0.0005, 0.0005, 0.0005]), units.Meters
        field_data_resample_filter.UpdateAttributes()
        document.AllAlgorithms.Add(field_data_resample_filter)
    
        # Adding a new MatlabExporter
        inputs = [field_data_resample_filter.Outputs["EM Potential(x,y,z,f0)"]]
        matlab_exporter = analysis.exporters.MatlabExporter(inputs=inputs)
        
        out_filename = os.path.join(results_folder, f'vmap_{acen}.mat')
        matlab_exporter.FileName = out_filename
        matlab_exporter.UpdateAttributes()
        document.AllAlgorithms.Add(matlab_exporter)
        matlab_exporter.Update() # this actually saves the data
        
        '''
        # Adding a new SliceFieldViewer
        inputs = [em_sensor_extractor.Outputs["EM Potential(x,y,z,f0)"]]
        slice_field_viewer = analysis.viewers.SliceFieldViewer(inputs=inputs)
        slice_field_viewer.Data.Mode = slice_field_viewer.Data.Mode.enum.QuantityRealPart
        slice_field_viewer.Slice.Index = 51
        slice_field_viewer.UpdateAttributes()
        document.AllAlgorithms.Add(slice_field_viewer)
        
        # Adding a new SliceFieldViewer (for the resampled field)
        inputs = [field_data_resample_filter.Outputs["EM Potential(x,y,z,f0)"]]
        slice_field_viewer = analysis.viewers.SliceFieldViewer(inputs=inputs)
        slice_field_viewer.Data.Mode = slice_field_viewer.Data.Mode.enum.QuantityRealPart
        slice_field_viewer.Slice.Index = 121
        slice_field_viewer.UpdateAttributes()
        document.AllAlgorithms.Add(slice_field_viewer)
        
        analysis.RefreshViewers()
        '''
    
    except Exception as exc:
        import traceback
        traceback.print_exc()
        # Reset active version to default
        ReleaseVersion.reset()
        raise(exc)
        
    finally:
        
        if do_erase:
            analysis.ResetAnalysis()
            
            simulation.ClearResults()
            simulation.ResetVoxels()
            document.AllSimulations.Remove(simulation)


print('Simulations complete.')